{
    "version": "https://jsonfeed.org/version/1",
    "title": "A young man should have the ambition of riding a fine horse and stepping on the plain • All posts by \"reverse\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/10/04/2023NewStarCTFwp/",
            "url": "http://example.com/2023/10/04/2023NewStarCTFwp/",
            "title": "2023NewStarCTFwp",
            "date_published": "2023-10-04T06:11:42.000Z",
            "content_html": "<h3 id=\"你每一次的突然想努力的冲动都是未来的你在向你求救\"><a class=\"markdownIt-Anchor\" href=\"#你每一次的突然想努力的冲动都是未来的你在向你求救\">#</a> <strong><s>你每一次的突然想努力的冲动，都是未来的你在向你求救</s></strong></h3>\n<h4 id=\"easy_re\"><a class=\"markdownIt-Anchor\" href=\"#easy_re\">#</a> easy_RE</h4>\n<p>IDA 启动！直接再汇编里看到 Flag, 灰常不错这应该是签到题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov     [rbp+30h+var_90], 66h ; &#x27;f&#x27;</span><br><span class=\"line\">mov     [rbp+30h+var_8C], 6Ch ; &#x27;l&#x27;</span><br><span class=\"line\">mov     [rbp+30h+var_88], 61h ; &#x27;a&#x27;</span><br><span class=\"line\">mov     [rbp+30h+var_84], 67h ; &#x27;g&#x27;</span><br><span class=\"line\">mov     [rbp+30h+var_80], 7Bh ; &#x27;&#123;&#x27;</span><br><span class=\"line\">mov     [rbp+30h+var_7C], 77h ; &#x27;w&#x27;</span><br><span class=\"line\">mov     [rbp+30h+var_78], 65h ; &#x27;e&#x27;</span><br><span class=\"line\">mov     [rbp+30h+var_74], 31h ; &#x27;1&#x27;</span><br><span class=\"line\">mov     [rbp+30h+var_70], 63h ; &#x27;c&#x27;</span><br><span class=\"line\">mov     [rbp+30h+var_6C], 30h ; &#x27;0&#x27;</span><br><span class=\"line\">mov     [rbp+30h+var_68], 6Dh ; &#x27;m&#x27;</span><br><span class=\"line\">另一半再下面</span><br><span class=\"line\">lea     rdx, [rbp+30h+var_21]</span><br><span class=\"line\">lea     rax, [rbp+30h+var_50]</span><br><span class=\"line\">mov     r8, rdx</span><br><span class=\"line\">lea     rdx, aEToRev3rse ; &quot;e_to_rev3rse!!&#125;&quot;</span><br><span class=\"line\">mov     rcx, rax</span><br></pre></td></tr></table></figure>\n<p we1c0me_to_rev3rse!!=\"\">flag</p>\n<h4 id=\"ke\"><a class=\"markdownIt-Anchor\" href=\"#ke\">#</a> ke</h4>\n<p>发现 upx 壳，直接 upx-d，IDA 打开发现就是把输入的每个字符加 1，然后与 enc 进行比较，逆一下用 enc 里的数据减 1 就行</p>\n<p>源代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> _main();</span><br><span class=\"line\">  memset(Str1, 0, sizeof(Str1));</span><br><span class=\"line\">  v7 = 0;</span><br><span class=\"line\">  Hello();</span><br><span class=\"line\">  scanf(&quot;%s&quot;, Str1);</span><br><span class=\"line\">  for ( i = 0i64; ; ++i )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v4 = &amp;Str1[strlen(Str1)];</span><br><span class=\"line\">    if ( i &gt;= v4 - Str1 )</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    ++Str1[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if ( !strncmp(Str1, enc, v4 - Str1) )</span><br><span class=\"line\">    puts(&quot;WOW!!&quot;);</span><br><span class=\"line\">  else</span><br><span class=\"line\">    puts(&quot;I believe you can do it!&quot;);</span><br><span class=\"line\">  system(&quot;pause&quot;);</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>exp</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b=&quot;gmbh|D1ohsbuv2bu21ot1oQb332ohUifG2stuQ[HBMBYZ2fwf2~&quot;</span><br><span class=\"line\">flag=&quot;&quot;</span><br><span class=\"line\">for i in range(len(b)):</span><br><span class=\"line\">    flag+=chr(ord(b[i])-1)</span><br><span class=\"line\">print(flag)</span><br></pre></td></tr></table></figure>\n<p C0ngratu1at10ns0nPa221ngTheF1rstPZGALAXY1eve1=\"\">flag</p>\n<h4 id=\"elf\"><a class=\"markdownIt-Anchor\" href=\"#elf\">#</a> ELF</h4>\n<p>IDA 打开看到两个加密 base64_encode 经典的 base64 加密，encode 就是将数据异或 0x20 然后加 16</p>\n<p>思路也很简单将数据先进行 base64 解密然后再逆一下 encode 这个函数就行了</p>\n<p>源代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> s = (char *)malloc(0x64uLL);</span><br><span class=\"line\">  printf(&quot;Input flag: &quot;);</span><br><span class=\"line\">  fgets(s, 100, stdin);</span><br><span class=\"line\">  s[strcspn(s, &quot;\\n&quot;)] = 0;</span><br><span class=\"line\">  v6 = (char *)encode(s);</span><br><span class=\"line\">  v3 = strlen(v6);</span><br><span class=\"line\">  s1 = (char *)base64_encode(v6, v3);</span><br><span class=\"line\">  if ( !strcmp(s1, &quot;VlxRV2t0II8kX2WPJ15fZ49nWFEnj3V8do8hYy9t&quot;) )</span><br><span class=\"line\">    puts(&quot;Correct&quot;);</span><br><span class=\"line\">  else</span><br><span class=\"line\">    puts(&quot;Wrong&quot;);</span><br><span class=\"line\">  free(v6);</span><br><span class=\"line\">  free(s1);</span><br><span class=\"line\">  free(s);</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">encode函数</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  size_t v1; // rax</span><br><span class=\"line\">  int v2; // eax</span><br><span class=\"line\">  _BYTE *v4; // [rsp+20h] [rbp-20h]</span><br><span class=\"line\">  int i; // [rsp+28h] [rbp-18h]</span><br><span class=\"line\">  int v6; // [rsp+2Ch] [rbp-14h]</span><br><span class=\"line\"></span><br><span class=\"line\">  v1 = strlen(a1);</span><br><span class=\"line\">  v4 = malloc(2 * v1 + 1);</span><br><span class=\"line\">  v6 = 0;</span><br><span class=\"line\">  for ( i = 0; i &lt; strlen(a1); ++i )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v2 = v6++;</span><br><span class=\"line\">    v4[v2] = (a1[i] ^ 0x20) + 16;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  v4[v6] = 0;</span><br><span class=\"line\">  return v4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>exp</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from base64 import*</span><br><span class=\"line\">b=b&quot;VlxRV2t0II8kX2WPJ15fZ49nWFEnj3V8do8hYy9t&quot;</span><br><span class=\"line\">c=b64decode(b)</span><br><span class=\"line\">flag=b&quot;&quot;</span><br><span class=\"line\">for i in c:</span><br><span class=\"line\">    flag += bytes([(i-16)^0x20])</span><br><span class=\"line\">print(flag)</span><br></pre></td></tr></table></figure>\n<p D0_4ou_7now_wha7_ELF_1s?=\"\">flag</p>\n<h4 id=\"segments\"><a class=\"markdownIt-Anchor\" href=\"#segments\">#</a> Segments</h4>\n<p>IDA 打开提示 shift+f7 直接就明白 flag 被拆分道每个段里，md 拼了好久 www 最发现 name_后面的’_’</p>\n<p>没有去掉 <s>服了我是 fw</s></p>\n<p You_ar3_g0od_at_f1nding_ELF_segments_name=\"\">flag</p>\n<h4 id=\"endian\"><a class=\"markdownIt-Anchor\" href=\"#endian\">#</a> Endian</h4>\n<p>很简单的就异或 0x12345678 就行了，然后就搞笑了没有出来 cccccc, 发现是小端然后写 exp 开始报错了</p>\n<p>浪费了一些时间</p>\n<p>源代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> v7 = __readfsqword(0x28u);</span><br><span class=\"line\">  puts(&quot;please input your flag&quot;);</span><br><span class=\"line\">  __isoc99_scanf(&quot;%s&quot;, v6);</span><br><span class=\"line\">  v5 = v6;</span><br><span class=\"line\">  for ( i = 0; i &lt;= 4; ++i )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    if ( *(_DWORD *)v5 != (array[i] ^ 0x12345678) )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      printf(&quot;wrong!&quot;);</span><br><span class=\"line\">      exit(0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    v5 += 4;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  printf(&quot;you are right&quot;);</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>exp</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = [0x75553A1E, 0x7B583A03, 0x4D58220C, 0x7B50383D, 0x736B3819]</span><br><span class=\"line\">flag = bytearray()</span><br><span class=\"line\"></span><br><span class=\"line\">for num in b:</span><br><span class=\"line\"># 将每个数值异或并将结果转换为字节串，使用小端序</span><br><span class=\"line\">   decrypted_bytes = (num ^ 0x12345678).to_bytes(8, byteorder=&#x27;little&#x27;, signed=False)</span><br><span class=\"line\">   flag += decrypted_bytes</span><br><span class=\"line\"></span><br><span class=\"line\">print(flag.decode(&#x27;utf-8&#x27;, &#x27;ignore&#x27;)+&quot;&#125;&quot;)</span><br></pre></td></tr></table></figure>\n<p>后来看一师傅的 wp 直接用 p32 包一下就行了，<s>ccccccc 我怎么没有想出来，菜死了</s></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enc = [0x75553A1E, 0x7B583A03, 0x4D58220C, 0x7B50383D, 0x736B3819]</span><br><span class=\"line\">from pwn import *</span><br><span class=\"line\">flag = [p32(i^0x12345678) for i in enc]</span><br><span class=\"line\">print(b&#x27;&#x27;.join(flag))</span><br><span class=\"line\"># flag&#123;llittl_Endian_a&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ezpe\"><a class=\"markdownIt-Anchor\" href=\"#ezpe\">#</a> EzPE</h4>\n<p>无效的 PE，修一下 PE 头和偏移就行，然后 IDa 打开就是每个数据异或他的索引和他上一个数据的异或值</p>\n<p>emmmmm 看代码就知道了，说的有点乱</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> _main(argc, argv, envp);</span><br><span class=\"line\">  puts(&amp;draw);</span><br><span class=\"line\">  puts(&quot;Please enter your flag!\\n&quot;);</span><br><span class=\"line\">  scanf(&quot;%s&quot;, input);</span><br><span class=\"line\">  for ( i = 0; i &lt; strlen(input) - 1; ++i )</span><br><span class=\"line\">    input[i] ^= i ^ input[i + 1];</span><br><span class=\"line\">  if ( !strcmp(input, data) )</span><br><span class=\"line\">    puts(&quot;You Win!&quot;);</span><br><span class=\"line\">  else</span><br><span class=\"line\">    puts(&quot;You lose!&quot;);</span><br><span class=\"line\">  system(&quot;pause&quot;);</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>exp</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def decrypt(input):</span><br><span class=\"line\">    decrypted = bytearray(input)</span><br><span class=\"line\">    for i in range(len(decrypted) - 2, -1, -1):</span><br><span class=\"line\">        decrypted[i] ^= i ^ decrypted[i + 1]</span><br><span class=\"line\">    return bytes(decrypted).decode(&#x27;utf-8&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">encrypted = [0x0A, 0x0C, 0x04, 0x1F, 0x26, 0x6C, 0x43, 0x2D, 0x3C, 0x0C, </span><br><span class=\"line\">             0x54, 0x4C, 0x24, 0x25, 0x11, 0x06, 0x05, 0x3A, 0x7C, 0x51, </span><br><span class=\"line\">             0x38, 0x1A, 0x03, 0x0D, 0x01, 0x36, 0x1F, 0x12, 0x26, 0x04, </span><br><span class=\"line\">             0x68, 0x5D, 0x3F, 0x2D, 0x37, 0x2A, 0x7D]</span><br><span class=\"line\"></span><br><span class=\"line\">decrypted_string = decrypt(encrypted)</span><br><span class=\"line\">print(decrypted_string)</span><br></pre></td></tr></table></figure>\n<p Y0u_kn0w_what_1s_PE_File_F0rmat=\"\">flag</p>\n<h4 id=\"lazy_activity\"><a class=\"markdownIt-Anchor\" href=\"#lazy_activity\">#</a> Lazy_Activity</h4>\n<p>查看 FlagActivity, 前面有个 editTextTextPersonName2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">editText.getText().toString()final EditText editText = (EditText) findViewById(R.id.editTextTextPersonName2);</span><br></pre></td></tr></table></figure>\n<p>editTextTextPersonName2 直接搜索这个资源找到 flag</p>\n<p Act1v1ty_!s_so00oo0o_Impor#an#=\"\">flag</p>\n<h4 id=\"androxor\"><a class=\"markdownIt-Anchor\" href=\"#androxor\">#</a> AndroXor</h4>\n<p>直接看代码吧</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String Xor(String str, String str2) &#123;</span><br><span class=\"line\">       char[] cArr = &#123;14, &#x27;\\r&#x27;, 17, 23, 2, &#x27;K&#x27;, &#x27;I&#x27;, &#x27;7&#x27;, &#x27; &#x27;, 30, 20, &#x27;I&#x27;, &#x27;\\n&#x27;, 2, &#x27;\\f&#x27;, &#x27;&gt;&#x27;, &#x27;(&#x27;, &#x27;@&#x27;, 11, &#x27;\\&#x27;&#x27;, &#x27;K&#x27;, &#x27;Y&#x27;, 25, &#x27;A&#x27;, &#x27;\\r&#x27;&#125;;</span><br><span class=\"line\">       char[] cArr2 = new char[str.length()];</span><br><span class=\"line\">       String str3 = str.length() != 25 ? &quot;wrong!!!&quot; : &quot;you win!!!&quot;;</span><br><span class=\"line\">       for (int i = 0; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">           char charAt = (char) (str.charAt(i) ^ str2.charAt(i % str2.length()));</span><br><span class=\"line\">           cArr2[i] = charAt;</span><br><span class=\"line\">           if (cArr[i] != charAt) &#123;</span><br><span class=\"line\">               return &quot;wrong!!!&quot;;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       return str3;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void onClick(View view) &#123;</span><br><span class=\"line\">               String obj = editText.getText().toString();</span><br><span class=\"line\">               MainActivity mainActivity = MainActivity.this;</span><br><span class=\"line\">               Toast.makeText(mainActivity, mainActivity.Xor(obj, &quot;happyx3&quot;), 1).show();</span><br><span class=\"line\">               Log.d(&quot;输入&quot;, editText.getText().toString());</span><br><span class=\"line\">           &#125;</span><br></pre></td></tr></table></figure>\n<p>也是考察的异或，拿这两个数据再异或一次就行，提取数据的时候要注意一下，<s>因为我报错了</s></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enc = [14, b&#x27;\\r&#x27;, 17, 23, 2, b&#x27;K&#x27;, b&#x27;I&#x27;, b&#x27;7&#x27;, b&#x27; &#x27;, 30, 20, b&#x27;I&#x27;, b&#x27;\\n&#x27;, 2, b&#x27;\\f&#x27;, b&#x27;&gt;&#x27;, b&#x27;(&#x27;, b&#x27;@&#x27;, 11, b&#x27;\\&#x27;&#x27;, b&#x27;K&#x27;, b&#x27;Y&#x27;, 25, b&#x27;A&#x27;, b&#x27;\\r&#x27;]</span><br><span class=\"line\">xor = b&#x27;happyx3&#x27;</span><br><span class=\"line\">for i in range(len(enc)):</span><br><span class=\"line\">    if type(enc[i]) == bytes:</span><br><span class=\"line\">        enc[i] = ord(enc[i])</span><br><span class=\"line\">flag = [enc[i]^xor[i%7] for i in range(len(enc))]</span><br><span class=\"line\">print(bytes(flag))</span><br></pre></td></tr></table></figure>\n<p 3z_And0r1d_X0r_x1x1=\"\">flag</p>\n<p>嗯… 这次 RE 大部分都是异或，嗯… 逻辑也很简单，嗯… 没有附件的师傅可以给俺要主页有俺 QQ, 嗯…(一万字)…。</p>\n<p><s>emmmm 还是菜</s></p>\n<p>爬了…</p>\n",
            "tags": [
                "Reverse"
            ]
        }
    ]
}